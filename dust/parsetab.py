
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODrightNOTAND ASSIGN COLON COMMA DIVIDE DOT ELIF ELSE EQ FALSE FLOAT FN FOR GE GT ID IF IMPORT IN INTEGER LBRACE LBRACKET LE LET LPAREN LT MINUS MOD NE NOT NULL OR PLUS POWER RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TIMES TRUE WHILEprogram : program_items\nprogram_items : program_items program_item\n    | program_item\n\nprogram_item : import_stmt\n            | function_decl\n            | struct_decl\n            | statement\n\nstatement : variable_decl\n    | assignment\n    | if_stmt\n    | while_stmt\n    | for_stmt\n    | return_stmt\n    | expr_stmt\n    | block\nimport_stmt : IMPORT STRING SEMICOLONfunction_decl : FN ID LPAREN parameters_opt RPAREN block\nparameters_opt : parameters\n    | empty\n\nparameters : ID\n    | parameters COMMA ID\nstruct_decl : STRUCT ID LBRACE struct_fields RBRACE SEMICOLON\nstruct_fields : ID COMMA struct_fields\n    | ID COMMA\n    | empty\nvariable_decl : LET ID ASSIGN expr SEMICOLONassignment : assign_target ASSIGN expr SEMICOLONassign_target : IDassign_target : assign_target DOT IDassign_target : assign_target LBRACKET expr RBRACKET\nif_stmt : IF expr block elif_blocks else_block_opt\n\nelif_blocks : elif_blocks ELIF expr block\n    | empty\n\nelse_block_opt : ELSE block\n    | empty\nwhile_stmt : WHILE expr blockfor_stmt : FOR ID IN expr block\nreturn_stmt : RETURN expr SEMICOLON\n    | RETURN SEMICOLON\nexpr_stmt : expr SEMICOLONblock : LBRACE statement_list RBRACE\nstatement_list : statement_list statement\n    | empty\nprimary_expr : ID\nprimary_expr : literal\n    | LPAREN expr RPAREN\n    | struct_literal\n    | array_literal\npostfix_expr : primary_expr postfix_chain\npostfix_chain : postfix postfix_chain\n    | empty\n\npostfix : LPAREN args_opt RPAREN\n    | DOT ID\n    | LBRACKET expr RBRACKET\n\nunary_expr : NOT unary_expr\n    | MINUS unary_expr\n    | postfix_expr\n\nexponential_expr : unary_expr\n    | unary_expr POWER exponential_expr\n\nmultiplicative_expr : exponential_expr\n    | multiplicative_expr TIMES exponential_expr\n    | multiplicative_expr DIVIDE exponential_expr\n    | multiplicative_expr MOD exponential_expr\n\nadditive_expr : multiplicative_expr\n    | additive_expr PLUS multiplicative_expr\n    | additive_expr MINUS multiplicative_expr\nrelational_expr : additive_expr\n| relational_expr LT additive_expr\n| relational_expr GT additive_expr\n| relational_expr LE additive_expr\n| relational_expr GE additive_exprequality_expr : relational_expr\n| equality_expr EQ relational_expr\n| equality_expr NE relational_exprlogical_and_expr : equality_expr\n| logical_and_expr AND equality_exprlogical_or_expr : logical_and_expr\n| logical_or_expr OR logical_and_exprexpr : logical_or_expr\nliteral : INTEGER\n    | FLOAT\n    | STRING\n    | TRUE\n    | FALSE\n    | NULL\n\nargs_opt : args\n    | empty\n\nargs : expr\n    | args COMMA expr\nstruct_literal : ID LBRACE field_assignments_opt RBRACE\nfield_assignments_opt : field_assignments\n    | empty\n\nfield_assignments : field_assign\n    | field_assignments COMMA field_assign\nfield_assign : ID COLON exprarray_literal : LBRACKET expr_list_opt RBRACKET\nexpr_list_opt : expr_list\n    | empty\n\nexpr_list : expr\n    | expr_list COMMA expr\nempty : '
    
_lr_action_items = {'IMPORT':([0,2,3,4,5,6,7,13,16,17,18,19,20,21,22,51,61,69,96,105,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[8,8,-3,-4,-5,-6,-7,-15,-8,-9,-10,-11,-12,-13,-14,-2,-40,-39,-16,-41,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'FN':([0,2,3,4,5,6,7,13,16,17,18,19,20,21,22,51,61,69,96,105,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[10,10,-3,-4,-5,-6,-7,-15,-8,-9,-10,-11,-12,-13,-14,-2,-40,-39,-16,-41,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'STRUCT':([0,2,3,4,5,6,7,13,16,17,18,19,20,21,22,51,61,69,96,105,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[14,14,-3,-4,-5,-6,-7,-15,-8,-9,-10,-11,-12,-13,-14,-2,-40,-39,-16,-41,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'LET':([0,2,3,4,5,6,7,13,15,16,17,18,19,20,21,22,51,58,59,61,69,96,105,106,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[23,23,-3,-4,-5,-6,-7,-15,-101,-8,-9,-10,-11,-12,-13,-14,-2,23,-43,-40,-39,-16,-41,-42,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'IF':([0,2,3,4,5,6,7,13,15,16,17,18,19,20,21,22,51,58,59,61,69,96,105,106,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[26,26,-3,-4,-5,-6,-7,-15,-101,-8,-9,-10,-11,-12,-13,-14,-2,26,-43,-40,-39,-16,-41,-42,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'WHILE':([0,2,3,4,5,6,7,13,15,16,17,18,19,20,21,22,51,58,59,61,69,96,105,106,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[27,27,-3,-4,-5,-6,-7,-15,-101,-8,-9,-10,-11,-12,-13,-14,-2,27,-43,-40,-39,-16,-41,-42,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'FOR':([0,2,3,4,5,6,7,13,15,16,17,18,19,20,21,22,51,58,59,61,69,96,105,106,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[28,28,-3,-4,-5,-6,-7,-15,-101,-8,-9,-10,-11,-12,-13,-14,-2,28,-43,-40,-39,-16,-41,-42,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'RETURN':([0,2,3,4,5,6,7,13,15,16,17,18,19,20,21,22,51,58,59,61,69,96,105,106,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[29,29,-3,-4,-5,-6,-7,-15,-101,-8,-9,-10,-11,-12,-13,-14,-2,29,-43,-40,-39,-16,-41,-42,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'LBRACE':([0,2,3,4,5,6,7,9,11,13,15,16,17,18,19,20,21,22,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,56,57,58,59,61,65,66,69,87,89,90,91,92,96,103,105,106,111,112,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,149,151,152,153,155,157,158,164,165,167,168,169,171,174,175,176,177,],[15,15,-3,-4,-5,-6,-7,-82,54,-15,-101,-8,-9,-10,-11,-12,-13,-14,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-2,54,104,15,-43,-40,15,15,-39,-56,-55,-49,-101,-51,-16,-46,-41,-42,-101,-36,-38,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-27,-101,-33,15,-52,-54,15,-26,-31,15,-35,-37,-17,-22,15,-34,-32,]),'ID':([0,2,3,4,5,6,7,10,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,37,40,51,54,58,59,61,62,63,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,94,95,96,97,104,105,106,107,111,112,113,114,116,142,144,149,151,152,156,159,162,164,165,166,168,169,171,174,176,177,],[11,11,-3,-4,-5,-6,-7,53,56,-15,57,-101,-8,-9,-10,-11,-12,-13,-14,60,56,56,67,56,56,56,56,-2,98,11,-43,-40,56,109,56,-39,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,136,56,-16,138,145,-41,-42,56,-101,-36,56,-38,56,56,98,-27,-101,-33,56,172,145,-26,-31,56,-35,-37,-17,-22,-34,-32,]),'NOT':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[40,40,-3,-4,-5,-6,-7,40,-15,-101,-8,-9,-10,-11,-12,-13,-14,40,40,40,40,40,40,-2,40,-43,-40,40,40,-39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-16,-41,-42,40,-101,-36,40,-38,40,40,-27,-101,-33,40,-26,-31,40,-35,-37,-17,-22,-34,-32,]),'MINUS':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,19,20,21,22,26,27,29,30,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,103,105,106,107,111,112,113,114,115,116,121,122,123,124,125,126,127,128,129,130,131,136,142,143,149,151,152,155,156,157,164,165,166,168,169,171,174,176,177,],[37,37,-3,-4,-5,-6,-7,-82,-44,37,-15,-101,-8,-9,-10,-11,-12,-13,-14,37,37,37,37,83,-64,37,-60,-58,37,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-2,-44,37,-43,-40,37,37,-39,37,37,37,37,37,37,37,37,37,37,37,37,37,-56,37,-55,-49,-101,-51,37,37,-16,-46,-41,-42,37,-101,-36,37,-38,-96,37,83,83,83,83,-65,-66,-61,-62,-63,-59,-50,-53,37,-90,-27,-101,-33,-52,37,-54,-26,-31,37,-35,-37,-17,-22,-34,-32,]),'LPAREN':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,42,43,44,45,46,47,48,49,50,51,53,56,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,91,93,95,96,103,105,106,107,111,112,113,114,115,116,136,142,143,149,151,152,155,156,157,164,165,166,168,169,171,174,176,177,],[12,12,-3,-4,-5,-6,-7,-82,-44,12,-15,-101,-8,-9,-10,-11,-12,-13,-14,12,12,12,12,12,12,93,-45,-47,-48,-80,-81,-83,-84,-85,-2,97,-44,12,-43,-40,12,12,-39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,93,12,12,-16,-46,-41,-42,12,-101,-36,12,-38,-96,12,-53,12,-90,-27,-101,-33,-52,12,-54,-26,-31,12,-35,-37,-17,-22,-34,-32,]),'INTEGER':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[46,46,-3,-4,-5,-6,-7,46,-15,-101,-8,-9,-10,-11,-12,-13,-14,46,46,46,46,46,46,-2,46,-43,-40,46,46,-39,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-16,-41,-42,46,-101,-36,46,-38,46,46,-27,-101,-33,46,-26,-31,46,-35,-37,-17,-22,-34,-32,]),'FLOAT':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[47,47,-3,-4,-5,-6,-7,47,-15,-101,-8,-9,-10,-11,-12,-13,-14,47,47,47,47,47,47,-2,47,-43,-40,47,47,-39,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-16,-41,-42,47,-101,-36,47,-38,47,47,-27,-101,-33,47,-26,-31,47,-35,-37,-17,-22,-34,-32,]),'STRING':([0,2,3,4,5,6,7,8,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[9,9,-3,-4,-5,-6,-7,52,9,-15,-101,-8,-9,-10,-11,-12,-13,-14,9,9,9,9,9,9,-2,9,-43,-40,9,9,-39,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-16,-41,-42,9,-101,-36,9,-38,9,9,-27,-101,-33,9,-26,-31,9,-35,-37,-17,-22,-34,-32,]),'TRUE':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[48,48,-3,-4,-5,-6,-7,48,-15,-101,-8,-9,-10,-11,-12,-13,-14,48,48,48,48,48,48,-2,48,-43,-40,48,48,-39,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-16,-41,-42,48,-101,-36,48,-38,48,48,-27,-101,-33,48,-26,-31,48,-35,-37,-17,-22,-34,-32,]),'FALSE':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[49,49,-3,-4,-5,-6,-7,49,-15,-101,-8,-9,-10,-11,-12,-13,-14,49,49,49,49,49,49,-2,49,-43,-40,49,49,-39,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-16,-41,-42,49,-101,-36,49,-38,49,49,-27,-101,-33,49,-26,-31,49,-35,-37,-17,-22,-34,-32,]),'NULL':([0,2,3,4,5,6,7,12,13,15,16,17,18,19,20,21,22,26,27,29,30,37,40,51,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,96,105,106,107,111,112,113,114,116,142,149,151,152,156,164,165,166,168,169,171,174,176,177,],[50,50,-3,-4,-5,-6,-7,50,-15,-101,-8,-9,-10,-11,-12,-13,-14,50,50,50,50,50,50,-2,50,-43,-40,50,50,-39,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-16,-41,-42,50,-101,-36,50,-38,50,50,-27,-101,-33,50,-26,-31,50,-35,-37,-17,-22,-34,-32,]),'LBRACKET':([0,2,3,4,5,6,7,9,11,12,13,15,16,17,18,19,20,21,22,25,26,27,29,30,37,40,42,43,44,45,46,47,48,49,50,51,56,58,59,61,62,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,88,91,93,95,96,103,105,106,107,109,111,112,113,114,115,116,136,142,143,149,150,151,152,155,156,157,164,165,166,168,169,171,174,176,177,],[30,30,-3,-4,-5,-6,-7,-82,-28,30,-15,-101,-8,-9,-10,-11,-12,-13,-14,64,30,30,30,30,30,30,95,-45,-47,-48,-80,-81,-83,-84,-85,-2,-44,30,-43,-40,30,30,-39,30,30,30,30,30,30,30,30,30,30,30,30,30,30,95,30,30,-16,-46,-41,-42,30,-29,-101,-36,30,-38,-96,30,-53,30,-90,-27,-30,-101,-33,-52,30,-54,-26,-31,30,-35,-37,-17,-22,-34,-32,]),'$end':([1,2,3,4,5,6,7,13,16,17,18,19,20,21,22,51,61,69,96,105,111,112,114,149,151,152,164,165,168,169,171,174,176,177,],[0,-1,-3,-4,-5,-6,-7,-15,-8,-9,-10,-11,-12,-13,-14,-2,-40,-39,-16,-41,-101,-36,-38,-27,-101,-33,-26,-31,-35,-37,-17,-22,-34,-32,]),'DOT':([9,11,25,42,43,44,45,46,47,48,49,50,56,91,103,109,115,136,143,150,155,157,],[-82,-28,63,94,-45,-47,-48,-80,-81,-83,-84,-85,-44,94,-46,-29,-96,-53,-90,-30,-52,-54,]),'POWER':([9,11,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,131,136,143,155,157,],[-82,-44,88,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,-50,-53,-90,-52,-54,]),'TIMES':([9,11,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,84,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,84,84,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'DIVIDE':([9,11,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,85,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,85,85,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'MOD':([9,11,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,86,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,86,86,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'PLUS':([9,11,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,82,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,82,82,82,82,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'LT':([9,11,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,78,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,78,78,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'GT':([9,11,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,79,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,79,79,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'LE':([9,11,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,80,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,80,80,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'GE':([9,11,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,81,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,81,81,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'EQ':([9,11,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,76,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'NE':([9,11,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,77,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,77,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'AND':([9,11,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,75,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,75,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'OR':([9,11,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,87,89,90,91,92,103,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,155,157,],[-82,-44,74,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,-56,-55,-49,-101,-51,-46,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,-52,-54,]),'SEMICOLON':([9,11,24,29,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,52,56,68,87,89,90,91,92,103,108,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,148,155,157,163,],[-82,-44,61,69,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,96,-44,114,-56,-55,-49,-101,-51,-46,149,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,164,-52,-54,174,]),'RPAREN':([9,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,55,56,87,89,90,91,92,93,97,103,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,143,155,157,170,172,],[-82,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,103,-44,-56,-55,-49,-101,-51,-101,-101,-46,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,155,-86,-87,-88,-53,-20,158,-18,-19,-90,-52,-54,-89,-21,]),'COMMA':([9,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,71,73,87,89,90,91,92,100,102,103,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,136,138,140,143,145,154,155,157,160,161,170,172,],[-82,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,116,-99,-56,-55,-49,-101,-51,144,-93,-46,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,156,-88,-53,-20,159,-90,162,-100,-52,-54,-95,-94,-89,-21,]),'RBRACKET':([9,30,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,56,70,71,72,73,87,89,90,91,92,103,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,137,143,154,155,157,],[-82,-101,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-44,115,-97,-98,-99,-56,-55,-49,-101,-51,-46,150,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,157,-90,-100,-52,-54,]),'RBRACE':([9,13,15,16,17,18,19,20,21,22,31,32,33,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,54,56,58,59,61,69,87,89,90,91,92,99,100,101,102,103,104,105,106,111,112,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,143,146,147,149,151,152,155,157,160,161,162,164,165,168,169,173,176,177,],[-82,-15,-101,-8,-9,-10,-11,-12,-13,-14,-79,-77,-75,-72,-67,-64,-60,-58,-57,-101,-45,-47,-48,-80,-81,-83,-84,-85,-101,-44,105,-43,-40,-39,-56,-55,-49,-101,-51,143,-91,-92,-93,-46,-101,-41,-42,-101,-36,-38,-96,-78,-76,-73,-74,-68,-69,-70,-71,-65,-66,-61,-62,-63,-59,-50,-53,-90,163,-25,-27,-101,-33,-52,-54,-95,-94,-24,-26,-31,-35,-37,-23,-34,-32,]),'ASSIGN':([11,25,60,109,150,],[-28,62,107,-29,-30,]),'IN':([67,],[113,]),'COLON':([98,],[142,]),'ELIF':([105,111,151,152,177,],[-41,-101,166,-33,-32,]),'ELSE':([105,111,151,152,177,],[-41,-101,167,-33,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_items':([0,],[2,]),'program_item':([0,2,],[3,51,]),'import_stmt':([0,2,],[4,4,]),'function_decl':([0,2,],[5,5,]),'struct_decl':([0,2,],[6,6,]),'statement':([0,2,58,],[7,7,106,]),'block':([0,2,58,65,66,153,158,167,175,],[13,13,13,111,112,169,171,176,177,]),'variable_decl':([0,2,58,],[16,16,16,]),'assignment':([0,2,58,],[17,17,17,]),'if_stmt':([0,2,58,],[18,18,18,]),'while_stmt':([0,2,58,],[19,19,19,]),'for_stmt':([0,2,58,],[20,20,20,]),'return_stmt':([0,2,58,],[21,21,21,]),'expr_stmt':([0,2,58,],[22,22,22,]),'expr':([0,2,12,26,27,29,30,58,62,64,93,95,107,113,116,142,156,166,],[24,24,55,65,66,68,73,24,108,110,135,137,148,153,154,160,170,175,]),'assign_target':([0,2,58,],[25,25,25,]),'logical_or_expr':([0,2,12,26,27,29,30,58,62,64,93,95,107,113,116,142,156,166,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'logical_and_expr':([0,2,12,26,27,29,30,58,62,64,74,93,95,107,113,116,142,156,166,],[32,32,32,32,32,32,32,32,32,32,117,32,32,32,32,32,32,32,32,]),'equality_expr':([0,2,12,26,27,29,30,58,62,64,74,75,93,95,107,113,116,142,156,166,],[33,33,33,33,33,33,33,33,33,33,33,118,33,33,33,33,33,33,33,33,]),'relational_expr':([0,2,12,26,27,29,30,58,62,64,74,75,76,77,93,95,107,113,116,142,156,166,],[34,34,34,34,34,34,34,34,34,34,34,34,119,120,34,34,34,34,34,34,34,34,]),'additive_expr':([0,2,12,26,27,29,30,58,62,64,74,75,76,77,78,79,80,81,93,95,107,113,116,142,156,166,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,121,122,123,124,35,35,35,35,35,35,35,35,]),'multiplicative_expr':([0,2,12,26,27,29,30,58,62,64,74,75,76,77,78,79,80,81,82,83,93,95,107,113,116,142,156,166,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,125,126,36,36,36,36,36,36,36,36,]),'exponential_expr':([0,2,12,26,27,29,30,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,127,128,129,130,38,38,38,38,38,38,38,38,]),'unary_expr':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[39,39,39,39,39,39,39,87,89,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'postfix_expr':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'primary_expr':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'literal':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'struct_literal':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'array_literal':([0,2,12,26,27,29,30,37,40,58,62,64,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,95,107,113,116,142,156,166,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'statement_list':([15,],[58,]),'empty':([15,30,42,54,91,93,97,104,111,151,162,],[59,72,92,101,92,134,141,147,152,168,147,]),'expr_list_opt':([30,],[70,]),'expr_list':([30,],[71,]),'postfix_chain':([42,91,],[90,131,]),'postfix':([42,91,],[91,91,]),'field_assignments_opt':([54,],[99,]),'field_assignments':([54,],[100,]),'field_assign':([54,144,],[102,161,]),'args_opt':([93,],[132,]),'args':([93,],[133,]),'parameters_opt':([97,],[139,]),'parameters':([97,],[140,]),'struct_fields':([104,162,],[146,173,]),'elif_blocks':([111,],[151,]),'else_block_opt':([151,],[165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_items','program',1,'p_program','parser.py',22),
  ('program_items -> program_items program_item','program_items',2,'p_program_items','parser.py',27),
  ('program_items -> program_item','program_items',1,'p_program_items','parser.py',28),
  ('program_item -> import_stmt','program_item',1,'p_program_item','parser.py',37),
  ('program_item -> function_decl','program_item',1,'p_program_item','parser.py',38),
  ('program_item -> struct_decl','program_item',1,'p_program_item','parser.py',39),
  ('program_item -> statement','program_item',1,'p_program_item','parser.py',40),
  ('statement -> variable_decl','statement',1,'p_statement','parser.py',46),
  ('statement -> assignment','statement',1,'p_statement','parser.py',47),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',48),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',49),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',50),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',51),
  ('statement -> expr_stmt','statement',1,'p_statement','parser.py',52),
  ('statement -> block','statement',1,'p_statement','parser.py',53),
  ('import_stmt -> IMPORT STRING SEMICOLON','import_stmt',3,'p_import_stmt','parser.py',59),
  ('function_decl -> FN ID LPAREN parameters_opt RPAREN block','function_decl',6,'p_function_decl','parser.py',65),
  ('parameters_opt -> parameters','parameters_opt',1,'p_parameters_opt','parser.py',71),
  ('parameters_opt -> empty','parameters_opt',1,'p_parameters_opt','parser.py',72),
  ('parameters -> ID','parameters',1,'p_parameters','parser.py',78),
  ('parameters -> parameters COMMA ID','parameters',3,'p_parameters','parser.py',79),
  ('struct_decl -> STRUCT ID LBRACE struct_fields RBRACE SEMICOLON','struct_decl',6,'p_struct_decl','parser.py',88),
  ('struct_fields -> ID COMMA struct_fields','struct_fields',3,'p_struct_fields','parser.py',93),
  ('struct_fields -> ID COMMA','struct_fields',2,'p_struct_fields','parser.py',94),
  ('struct_fields -> empty','struct_fields',1,'p_struct_fields','parser.py',95),
  ('variable_decl -> LET ID ASSIGN expr SEMICOLON','variable_decl',5,'p_variable_decl','parser.py',107),
  ('assignment -> assign_target ASSIGN expr SEMICOLON','assignment',4,'p_assignment','parser.py',112),
  ('assign_target -> ID','assign_target',1,'p_assign_target_id','parser.py',116),
  ('assign_target -> assign_target DOT ID','assign_target',3,'p_assign_target_member','parser.py',120),
  ('assign_target -> assign_target LBRACKET expr RBRACKET','assign_target',4,'p_assign_target_index','parser.py',124),
  ('if_stmt -> IF expr block elif_blocks else_block_opt','if_stmt',5,'p_if_stmt','parser.py',131),
  ('elif_blocks -> elif_blocks ELIF expr block','elif_blocks',4,'p_elif_blocks','parser.py',137),
  ('elif_blocks -> empty','elif_blocks',1,'p_elif_blocks','parser.py',138),
  ('else_block_opt -> ELSE block','else_block_opt',2,'p_else_block_opt','parser.py',147),
  ('else_block_opt -> empty','else_block_opt',1,'p_else_block_opt','parser.py',148),
  ('while_stmt -> WHILE expr block','while_stmt',3,'p_while_stmt','parser.py',153),
  ('for_stmt -> FOR ID IN expr block','for_stmt',5,'p_for_stmt','parser.py',157),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',162),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',163),
  ('expr_stmt -> expr SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',168),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',172),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',177),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',178),
  ('primary_expr -> ID','primary_expr',1,'p_expr_identifier','parser.py',188),
  ('primary_expr -> literal','primary_expr',1,'p_primary_expr','parser.py',193),
  ('primary_expr -> LPAREN expr RPAREN','primary_expr',3,'p_primary_expr','parser.py',194),
  ('primary_expr -> struct_literal','primary_expr',1,'p_primary_expr','parser.py',195),
  ('primary_expr -> array_literal','primary_expr',1,'p_primary_expr','parser.py',196),
  ('postfix_expr -> primary_expr postfix_chain','postfix_expr',2,'p_postfix_expr','parser.py',204),
  ('postfix_chain -> postfix postfix_chain','postfix_chain',2,'p_postfix_chain','parser.py',220),
  ('postfix_chain -> empty','postfix_chain',1,'p_postfix_chain','parser.py',221),
  ('postfix -> LPAREN args_opt RPAREN','postfix',3,'p_postfix','parser.py',231),
  ('postfix -> DOT ID','postfix',2,'p_postfix','parser.py',232),
  ('postfix -> LBRACKET expr RBRACKET','postfix',3,'p_postfix','parser.py',233),
  ('unary_expr -> NOT unary_expr','unary_expr',2,'p_unary_op','parser.py',245),
  ('unary_expr -> MINUS unary_expr','unary_expr',2,'p_unary_op','parser.py',246),
  ('unary_expr -> postfix_expr','unary_expr',1,'p_unary_op','parser.py',247),
  ('exponential_expr -> unary_expr','exponential_expr',1,'p_exponential_expr','parser.py',257),
  ('exponential_expr -> unary_expr POWER exponential_expr','exponential_expr',3,'p_exponential_expr','parser.py',258),
  ('multiplicative_expr -> exponential_expr','multiplicative_expr',1,'p_multiplicative_expr','parser.py',267),
  ('multiplicative_expr -> multiplicative_expr TIMES exponential_expr','multiplicative_expr',3,'p_multiplicative_expr','parser.py',268),
  ('multiplicative_expr -> multiplicative_expr DIVIDE exponential_expr','multiplicative_expr',3,'p_multiplicative_expr','parser.py',269),
  ('multiplicative_expr -> multiplicative_expr MOD exponential_expr','multiplicative_expr',3,'p_multiplicative_expr','parser.py',270),
  ('additive_expr -> multiplicative_expr','additive_expr',1,'p_additive_expr','parser.py',279),
  ('additive_expr -> additive_expr PLUS multiplicative_expr','additive_expr',3,'p_additive_expr','parser.py',280),
  ('additive_expr -> additive_expr MINUS multiplicative_expr','additive_expr',3,'p_additive_expr','parser.py',281),
  ('relational_expr -> additive_expr','relational_expr',1,'p_relational_expr','parser.py',289),
  ('relational_expr -> relational_expr LT additive_expr','relational_expr',3,'p_relational_expr','parser.py',290),
  ('relational_expr -> relational_expr GT additive_expr','relational_expr',3,'p_relational_expr','parser.py',291),
  ('relational_expr -> relational_expr LE additive_expr','relational_expr',3,'p_relational_expr','parser.py',292),
  ('relational_expr -> relational_expr GE additive_expr','relational_expr',3,'p_relational_expr','parser.py',293),
  ('equality_expr -> relational_expr','equality_expr',1,'p_equality_expr','parser.py',300),
  ('equality_expr -> equality_expr EQ relational_expr','equality_expr',3,'p_equality_expr','parser.py',301),
  ('equality_expr -> equality_expr NE relational_expr','equality_expr',3,'p_equality_expr','parser.py',302),
  ('logical_and_expr -> equality_expr','logical_and_expr',1,'p_logical_and_expr','parser.py',309),
  ('logical_and_expr -> logical_and_expr AND equality_expr','logical_and_expr',3,'p_logical_and_expr','parser.py',310),
  ('logical_or_expr -> logical_and_expr','logical_or_expr',1,'p_logical_or_expr','parser.py',317),
  ('logical_or_expr -> logical_or_expr OR logical_and_expr','logical_or_expr',3,'p_logical_or_expr','parser.py',318),
  ('expr -> logical_or_expr','expr',1,'p_expr','parser.py',326),
  ('literal -> INTEGER','literal',1,'p_expr_literal','parser.py',331),
  ('literal -> FLOAT','literal',1,'p_expr_literal','parser.py',332),
  ('literal -> STRING','literal',1,'p_expr_literal','parser.py',333),
  ('literal -> TRUE','literal',1,'p_expr_literal','parser.py',334),
  ('literal -> FALSE','literal',1,'p_expr_literal','parser.py',335),
  ('literal -> NULL','literal',1,'p_expr_literal','parser.py',336),
  ('args_opt -> args','args_opt',1,'p_args_opt','parser.py',342),
  ('args_opt -> empty','args_opt',1,'p_args_opt','parser.py',343),
  ('args -> expr','args',1,'p_args','parser.py',349),
  ('args -> args COMMA expr','args',3,'p_args','parser.py',350),
  ('struct_literal -> ID LBRACE field_assignments_opt RBRACE','struct_literal',4,'p_struct_literal','parser.py',358),
  ('field_assignments_opt -> field_assignments','field_assignments_opt',1,'p_field_assignments_opt','parser.py',363),
  ('field_assignments_opt -> empty','field_assignments_opt',1,'p_field_assignments_opt','parser.py',364),
  ('field_assignments -> field_assign','field_assignments',1,'p_field_assignments','parser.py',370),
  ('field_assignments -> field_assignments COMMA field_assign','field_assignments',3,'p_field_assignments','parser.py',371),
  ('field_assign -> ID COLON expr','field_assign',3,'p_field_assign','parser.py',379),
  ('array_literal -> LBRACKET expr_list_opt RBRACKET','array_literal',3,'p_array_literal','parser.py',383),
  ('expr_list_opt -> expr_list','expr_list_opt',1,'p_expr_list_opt','parser.py',388),
  ('expr_list_opt -> empty','expr_list_opt',1,'p_expr_list_opt','parser.py',389),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',395),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser.py',396),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',413),
]
